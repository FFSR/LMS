package com.web.lms.model;
// Generated Apr 25, 2018 8:57:44 PM by Hibernate Tools 5.2.8.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

import com.fasterxml.jackson.annotation.JsonIgnore;

/**
 * LmsWfRequest generated by hbm2java
 */
@Entity
@Table(name = "lms_wf_request", catalog = "lmsdb")
public class LmsWfRequest implements java.io.Serializable {

	private Integer id;
	private LmsLeaveApplication lmsLeaveApplication;
	private LmsUser lmsUser;
	private LmsWftRequestType lmsWftRequestType;
	private Date startDate;
	private Date endDate;
	private String status;
	private Date insertDate;
	private Integer insertBy;
	private Date updateDate;
	private Integer updateBy;
	private Set<LmsWfRequestHop> lmsWfRequestHops = new HashSet<LmsWfRequestHop>(0);

	public LmsWfRequest() {
	}

	public LmsWfRequest(LmsLeaveApplication lmsLeaveApplication, LmsUser lmsUser, LmsWftRequestType lmsWftRequestType,
			Date startDate, Date endDate, String status, Date insertDate, Integer insertBy, Date updateDate,
			Integer updateBy, Set<LmsWfRequestHop> lmsWfRequestHops) {
		this.lmsLeaveApplication = lmsLeaveApplication;
		this.lmsUser = lmsUser;
		this.lmsWftRequestType = lmsWftRequestType;
		this.startDate = startDate;
		this.endDate = endDate;
		this.status = status;
		this.insertDate = insertDate;
		this.insertBy = insertBy;
		this.updateDate = updateDate;
		this.updateBy = updateBy;
		this.lmsWfRequestHops = lmsWfRequestHops;
	}

	@Id
	@GeneratedValue(strategy = IDENTITY)

	@Column(name = "ID", unique = true, nullable = false)
	public Integer getId() {
		return this.id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "LEAVE_APPLICATION_ID")
	public LmsLeaveApplication getLmsLeaveApplication() {
		return this.lmsLeaveApplication;
	}

	public void setLmsLeaveApplication(LmsLeaveApplication lmsLeaveApplication) {
		this.lmsLeaveApplication = lmsLeaveApplication;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "USER_ID")
	public LmsUser getLmsUser() {
		return this.lmsUser;
	}

	public void setLmsUser(LmsUser lmsUser) {
		this.lmsUser = lmsUser;
	}

	@ManyToOne(fetch = FetchType.EAGER)
	@JoinColumn(name = "WFT_REQUEST_TYPE_ID")
	public LmsWftRequestType getLmsWftRequestType() {
		return this.lmsWftRequestType;
	}

	public void setLmsWftRequestType(LmsWftRequestType lmsWftRequestType) {
		this.lmsWftRequestType = lmsWftRequestType;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "START_DATE", length = 19)
	public Date getStartDate() {
		return this.startDate;
	}

	public void setStartDate(Date startDate) {
		this.startDate = startDate;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "END_DATE", length = 19)
	public Date getEndDate() {
		return this.endDate;
	}

	public void setEndDate(Date endDate) {
		this.endDate = endDate;
	}

	@Column(name = "STATUS", length = 50)
	public String getStatus() {
		return this.status;
	}

	public void setStatus(String status) {
		this.status = status;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "INSERT_DATE", length = 19)
	public Date getInsertDate() {
		return this.insertDate;
	}

	public void setInsertDate(Date insertDate) {
		this.insertDate = insertDate;
	}

	@Column(name = "INSERT_BY")
	public Integer getInsertBy() {
		return this.insertBy;
	}

	public void setInsertBy(Integer insertBy) {
		this.insertBy = insertBy;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "UPDATE_DATE", length = 19)
	public Date getUpdateDate() {
		return this.updateDate;
	}

	public void setUpdateDate(Date updateDate) {
		this.updateDate = updateDate;
	}

	@Column(name = "UPDATE_BY")
	public Integer getUpdateBy() {
		return this.updateBy;
	}

	public void setUpdateBy(Integer updateBy) {
		this.updateBy = updateBy;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "lmsWfRequest")
	@JsonIgnore
	public Set<LmsWfRequestHop> getLmsWfRequestHops() {
		return this.lmsWfRequestHops;
	}

	public void setLmsWfRequestHops(Set<LmsWfRequestHop> lmsWfRequestHops) {
		this.lmsWfRequestHops = lmsWfRequestHops;
	}

}
